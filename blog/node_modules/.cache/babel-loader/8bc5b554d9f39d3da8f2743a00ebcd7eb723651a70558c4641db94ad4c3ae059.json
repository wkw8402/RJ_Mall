{"ast":null,"code":"var _jsxFileName = \"/Users/kun/Desktop/React/blog/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable */\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let post = 'toronto udon place';\n\n  /**\n   * Destructuring\n   * title = data stored in state, b = function to change state\n  **/\n  let [title, setTitle] = useState(['men coat suggestion', 'python study', 'toronto udon place']);\n  let [like, setLike] = useState([0, 0, 0]);\n  let [modal, setModal] = useState(false);\n  let [current, setCurrent] = useState(0);\n\n  /**\n   * In React, to change a part of array/object state, we need to make an independent copy = shallow copy or deep copy\n   * good to preserve the original\n   * array/object variable/state save the pointer to data in RAM\n   * spread operator = ... = take brackets off = [1,2,3] -> 1,2,3\n   * [...original] or {...original} make independent copy with different reference or pointer\n   * take off brackets and make it into array again\n  **/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"ReactBlog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        let copy = [...title];\n        copy[0] = 'women coat suggestion';\n        setTitle(copy);\n      },\n      children: \" changeTitle \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        let copy = [...title];\n        copy.sort();\n        setTitle(copy);\n      },\n      children: \" sortTitle \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), title.map(function (a, i) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          onClick: () => {\n            setModal(!modal);\n            setCurrent(i);\n          },\n          children: [title[i], \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              let copy = [...like];\n              copy[i] += 1;\n              setLike(copy);\n            },\n            children: \"\\uD83D\\uDC4D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 82\n          }, this), \" \", like[i]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"published 02.14\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this);\n    }), modal == true ? /*#__PURE__*/_jsxDEV(Modal, {\n      current: current,\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 24\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * from parent component to child component\n * use props parameter to send state like title\n */\n\n/**\n * Steps for dynamic UI\n * 1. design html css\n * 2. save UI's current form in state\n * 3. write how UI will be shown according to state\n */\n\n// const Modal = () => {\n//   return (\n//     <div>\n//     </div>\n//   )\n// }\n\n/**\n * When is component good?\n * 1. repetitive html\n * 2. big pages\n * 3. things that change often\n * @returns \n */\n_s(App, \"Yk1DPNNaA2E9a3rB7jg+M/O7CZU=\");\n_c = App;\nfunction Modal(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: props.title[props.current]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Detail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"changeTitle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n// use {} for data binding\n_c2 = Modal;\nexport default App;\n\n/** For loop\n * \n * we cannot use for loop in jsx so use it outside = above return\n * \n * function App (){\n  \n    var arr = [];\n    for (var i = 0; i < 3; i++) {\n      arr.push(<div>Hi</div>)\n    }\n    return (\n      <div>\n        { arr }\n      </div>\n    )\n  }\n */\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["logo","useState","jsxDEV","_jsxDEV","App","_s","post","title","setTitle","like","setLike","modal","setModal","current","setCurrent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","copy","sort","map","a","i","Modal","_c","props","_c2","$RefreshReg$"],"sources":["/Users/kun/Desktop/React/blog/src/App.js"],"sourcesContent":["/* eslint-disable */\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  let post = 'toronto udon place';\n  \n  /**\n   * Destructuring\n   * title = data stored in state, b = function to change state\n  **/\n  let [title, setTitle] = useState(['men coat suggestion', 'python study', 'toronto udon place']);\n  \n  let [like, setLike] = useState([0,0,0]);\n\n  let [modal, setModal] = useState(false);\n\n  let [current, setCurrent] = useState(0);\n\n  /**\n   * In React, to change a part of array/object state, we need to make an independent copy = shallow copy or deep copy\n   * good to preserve the original\n   * array/object variable/state save the pointer to data in RAM\n   * spread operator = ... = take brackets off = [1,2,3] -> 1,2,3\n   * [...original] or {...original} make independent copy with different reference or pointer\n   * take off brackets and make it into array again\n  **/\n\n  return (\n    <div className=\"App\">\n      <div className=\"black-nav\">\n        <h4>ReactBlog</h4> \n      </div>\n\n      <button onClick={ ()=>{\n        let copy = [...title];\n        copy[0] = 'women coat suggestion'\n        setTitle(copy); \n      } }> changeTitle </button>\n\n      <button onClick={ ()=>{\n        let copy = [...title];\n        copy.sort();\n        setTitle(copy); \n      } }> sortTitle </button>\n\n      {/* <div className=\"list\">\n        <h4>{ title[0] } <span onClick={ ()=>{ setLike(like+1) } }>üëç</span> {like} </h4>\n        <p>published 02.14</p>\n      </div>\n      <div className=\"list\">\n        <h4>{ title[1] }</h4>\n        <p>published 02.14</p>\n      </div>\n      <div className=\"list\">\n        <h4 onClick={()=>{ setModal(!modal) }}>{ title[2] }</h4>\n        <p>published 02.14</p>\n      </div> */}\n\n      {\n        title.map(function(a, i){\n          return (\n            <div className=\"list\" key={i}>\n              <h4 onClick={()=>{ setModal(!modal); setCurrent(i) }}>{ title[i] } <span onClick={ ()=>{\n                let copy = [...like];\n                copy[i] += 1;\n                setLike(copy); \n              } }>üëç</span> {like[i]}</h4>\n              <p>published 02.14</p>\n            </div>\n          )\n        })\n      }\n\n      \n\n      {\n       modal == true ? <Modal current={current} title={title}/> : null \n      }\n      \n    </div>\n  );\n}\n\n/**\n * from parent component to child component\n * use props parameter to send state like title\n */\n\n/**\n * Steps for dynamic UI\n * 1. design html css\n * 2. save UI's current form in state\n * 3. write how UI will be shown according to state\n */\n\n// const Modal = () => {\n//   return (\n//     <div>\n//     </div>\n//   )\n// }\n\n/**\n * When is component good?\n * 1. repetitive html\n * 2. big pages\n * 3. things that change often\n * @returns \n */\nfunction Modal(props) {\n  return (\n    <div className=\"modal\">\n      <h4>{ props.title[props.current] }</h4>\n      <p>Date</p>\n      <p>Detail</p>\n      <button>changeTitle</button>\n    </div>\n  )\n}\n\n// use {} for data binding\n\nexport default App;\n\n/** For loop\n * \n * we cannot use for loop in jsx so use it outside = above return\n * \n * function App (){\n  \n    var arr = [];\n    for (var i = 0; i < 3; i++) {\n      arr.push(<div>Hi</div>)\n    }\n    return (\n      <div>\n        { arr }\n      </div>\n    )\n  }\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}